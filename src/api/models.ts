//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class SearchDocumentDTO implements ISearchDocumentDTO {
    name?: string | null;
    description?: string | null;
    type?: number | null;
    dateFrom?: Date | null;
    dateTo?: Date | null;

    constructor(data?: ISearchDocumentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.dateFrom = _data["dateFrom"] ? new Date(_data["dateFrom"].toString()) : <any>null;
            this.dateTo = _data["dateTo"] ? new Date(_data["dateTo"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SearchDocumentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SearchDocumentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>null;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>null;
        return data;
    }
}

export interface ISearchDocumentDTO {
    name?: string | null;
    description?: string | null;
    type?: number | null;
    dateFrom?: Date | null;
    dateTo?: Date | null;
}

export class DocumentDTO implements IDocumentDTO {
    content?: string | null;
    contentType?: string | null;
    extension?: string | null;
    name?: string | null;
    description?: string | null;
    type?: number | null;

    constructor(data?: IDocumentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.content = _data["content"] !== undefined ? _data["content"] : <any>null;
            this.contentType = _data["contentType"] !== undefined ? _data["contentType"] : <any>null;
            this.extension = _data["extension"] !== undefined ? _data["extension"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): DocumentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content !== undefined ? this.content : <any>null;
        data["contentType"] = this.contentType !== undefined ? this.contentType : <any>null;
        data["extension"] = this.extension !== undefined ? this.extension : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data;
    }
}

export interface IDocumentDTO {
    content?: string | null;
    contentType?: string | null;
    extension?: string | null;
    name?: string | null;
    description?: string | null;
    type?: number | null;
}

export class NotificationDTO implements INotificationDTO {
    userId?: string | null;
    title?: string | null;
    message?: string | null;

    constructor(data?: INotificationDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): NotificationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data;
    }
}

export interface INotificationDTO {
    userId?: string | null;
    title?: string | null;
    message?: string | null;
}

export class MongoClaim implements IMongoClaim {
    type?: string | null;
    value?: string | null;
    issuer?: string | null;

    constructor(data?: IMongoClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.issuer = _data["issuer"] !== undefined ? _data["issuer"] : <any>null;
        }
    }

    static fromJS(data: any): MongoClaim {
        data = typeof data === 'object' ? data : {};
        let result = new MongoClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["issuer"] = this.issuer !== undefined ? this.issuer : <any>null;
        return data;
    }
}

export interface IMongoClaim {
    type?: string | null;
    value?: string | null;
    issuer?: string | null;
}

export class UserLoginInfo implements IUserLoginInfo {
    loginProvider?: string | null;
    providerKey?: string | null;
    providerDisplayName?: string | null;

    constructor(data?: IUserLoginInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loginProvider = _data["loginProvider"] !== undefined ? _data["loginProvider"] : <any>null;
            this.providerKey = _data["providerKey"] !== undefined ? _data["providerKey"] : <any>null;
            this.providerDisplayName = _data["providerDisplayName"] !== undefined ? _data["providerDisplayName"] : <any>null;
        }
    }

    static fromJS(data: any): UserLoginInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginProvider"] = this.loginProvider !== undefined ? this.loginProvider : <any>null;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : <any>null;
        data["providerDisplayName"] = this.providerDisplayName !== undefined ? this.providerDisplayName : <any>null;
        return data;
    }
}

export interface IUserLoginInfo {
    loginProvider?: string | null;
    providerKey?: string | null;
    providerDisplayName?: string | null;
}

export class Token implements IToken {
    loginProvider?: string | null;
    name?: string | null;
    value?: string | null;

    constructor(data?: IToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loginProvider = _data["loginProvider"] !== undefined ? _data["loginProvider"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): Token {
        data = typeof data === 'object' ? data : {};
        let result = new Token();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginProvider"] = this.loginProvider !== undefined ? this.loginProvider : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export interface IToken {
    loginProvider?: string | null;
    name?: string | null;
    value?: string | null;
}

export class User implements IUser {
    id?: string;
    userName?: string | null;
    normalizedUserName?: string | null;
    email?: string | null;
    normalizedEmail?: string | null;
    emailConfirmed?: boolean;
    passwordHash?: string | null;
    securityStamp?: string | null;
    concurrencyStamp?: string | null;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | null;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    version?: number;
    readonly createdOn?: Date;
    claims?: MongoClaim[] | null;
    roles?: string[] | null;
    logins?: UserLoginInfo[] | null;
    tokens?: Token[] | null;
    firstName?: string | null;
    lastName?: string | null;
    password?: string | null;
    pin?: number;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.normalizedUserName = _data["normalizedUserName"] !== undefined ? _data["normalizedUserName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.normalizedEmail = _data["normalizedEmail"] !== undefined ? _data["normalizedEmail"] : <any>null;
            this.emailConfirmed = _data["emailConfirmed"] !== undefined ? _data["emailConfirmed"] : <any>null;
            this.passwordHash = _data["passwordHash"] !== undefined ? _data["passwordHash"] : <any>null;
            this.securityStamp = _data["securityStamp"] !== undefined ? _data["securityStamp"] : <any>null;
            this.concurrencyStamp = _data["concurrencyStamp"] !== undefined ? _data["concurrencyStamp"] : <any>null;
            this.phoneNumber = _data["phoneNumber"] !== undefined ? _data["phoneNumber"] : <any>null;
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"] !== undefined ? _data["phoneNumberConfirmed"] : <any>null;
            this.twoFactorEnabled = _data["twoFactorEnabled"] !== undefined ? _data["twoFactorEnabled"] : <any>null;
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>null;
            this.lockoutEnabled = _data["lockoutEnabled"] !== undefined ? _data["lockoutEnabled"] : <any>null;
            this.accessFailedCount = _data["accessFailedCount"] !== undefined ? _data["accessFailedCount"] : <any>null;
            this.version = _data["version"] !== undefined ? _data["version"] : <any>null;
            (<any>this).createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>null;
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(MongoClaim.fromJS(item));
            }
            else {
                this.claims = <any>null;
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            else {
                this.roles = <any>null;
            }
            if (Array.isArray(_data["logins"])) {
                this.logins = [] as any;
                for (let item of _data["logins"])
                    this.logins!.push(UserLoginInfo.fromJS(item));
            }
            else {
                this.logins = <any>null;
            }
            if (Array.isArray(_data["tokens"])) {
                this.tokens = [] as any;
                for (let item of _data["tokens"])
                    this.tokens!.push(Token.fromJS(item));
            }
            else {
                this.tokens = <any>null;
            }
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.pin = _data["pin"] !== undefined ? _data["pin"] : <any>null;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["normalizedUserName"] = this.normalizedUserName !== undefined ? this.normalizedUserName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["normalizedEmail"] = this.normalizedEmail !== undefined ? this.normalizedEmail : <any>null;
        data["emailConfirmed"] = this.emailConfirmed !== undefined ? this.emailConfirmed : <any>null;
        data["passwordHash"] = this.passwordHash !== undefined ? this.passwordHash : <any>null;
        data["securityStamp"] = this.securityStamp !== undefined ? this.securityStamp : <any>null;
        data["concurrencyStamp"] = this.concurrencyStamp !== undefined ? this.concurrencyStamp : <any>null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : <any>null;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed !== undefined ? this.phoneNumberConfirmed : <any>null;
        data["twoFactorEnabled"] = this.twoFactorEnabled !== undefined ? this.twoFactorEnabled : <any>null;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>null;
        data["lockoutEnabled"] = this.lockoutEnabled !== undefined ? this.lockoutEnabled : <any>null;
        data["accessFailedCount"] = this.accessFailedCount !== undefined ? this.accessFailedCount : <any>null;
        data["version"] = this.version !== undefined ? this.version : <any>null;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        if (Array.isArray(this.logins)) {
            data["logins"] = [];
            for (let item of this.logins)
                data["logins"].push(item.toJSON());
        }
        if (Array.isArray(this.tokens)) {
            data["tokens"] = [];
            for (let item of this.tokens)
                data["tokens"].push(item.toJSON());
        }
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["pin"] = this.pin !== undefined ? this.pin : <any>null;
        return data;
    }
}

export interface IUser {
    id?: string;
    userName?: string | null;
    normalizedUserName?: string | null;
    email?: string | null;
    normalizedEmail?: string | null;
    emailConfirmed?: boolean;
    passwordHash?: string | null;
    securityStamp?: string | null;
    concurrencyStamp?: string | null;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | null;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    version?: number;
    createdOn?: Date;
    claims?: MongoClaim[] | null;
    roles?: string[] | null;
    logins?: UserLoginInfo[] | null;
    tokens?: Token[] | null;
    firstName?: string | null;
    lastName?: string | null;
    password?: string | null;
    pin?: number;
}

export class SearchWorkflowsDTO implements ISearchWorkflowsDTO {
    name?: string | null;
    description?: string | null;
    identification?: string | null;
    status?: number | null;
    dateFrom?: Date | null;
    dateTo?: Date | null;
    userId?: string | null;

    constructor(data?: ISearchWorkflowsDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.identification = _data["identification"] !== undefined ? _data["identification"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.dateFrom = _data["dateFrom"] ? new Date(_data["dateFrom"].toString()) : <any>null;
            this.dateTo = _data["dateTo"] ? new Date(_data["dateTo"].toString()) : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): SearchWorkflowsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SearchWorkflowsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["identification"] = this.identification !== undefined ? this.identification : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["dateFrom"] = this.dateFrom ? this.dateFrom.toISOString() : <any>null;
        data["dateTo"] = this.dateTo ? this.dateTo.toISOString() : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export interface ISearchWorkflowsDTO {
    name?: string | null;
    description?: string | null;
    identification?: string | null;
    status?: number | null;
    dateFrom?: Date | null;
    dateTo?: Date | null;
    userId?: string | null;
}

export class WorkflowDTO implements IWorkflowDTO {
    name?: string | null;
    description?: string | null;
    identification?: string | null;
    assignedUserId?: string | null;
    documentIds?: string[] | null;

    constructor(data?: IWorkflowDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.identification = _data["identification"] !== undefined ? _data["identification"] : <any>null;
            this.assignedUserId = _data["assignedUserId"] !== undefined ? _data["assignedUserId"] : <any>null;
            if (Array.isArray(_data["documentIds"])) {
                this.documentIds = [] as any;
                for (let item of _data["documentIds"])
                    this.documentIds!.push(item);
            }
            else {
                this.documentIds = <any>null;
            }
        }
    }

    static fromJS(data: any): WorkflowDTO {
        data = typeof data === 'object' ? data : {};
        let result = new WorkflowDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["identification"] = this.identification !== undefined ? this.identification : <any>null;
        data["assignedUserId"] = this.assignedUserId !== undefined ? this.assignedUserId : <any>null;
        if (Array.isArray(this.documentIds)) {
            data["documentIds"] = [];
            for (let item of this.documentIds)
                data["documentIds"].push(item);
        }
        return data;
    }
}

export interface IWorkflowDTO {
    name?: string | null;
    description?: string | null;
    identification?: string | null;
    assignedUserId?: string | null;
    documentIds?: string[] | null;
}